{
    "id": 8024,
    "citation_title": "A Framework for Applied Dynamic Analysis in I.O.",
    "citation_author": [
        "Ariel Pakes"
    ],
    "citation_publication_date": "2000-12-01",
    "issue_date": "2000-12-01",
    "revision_date": "None",
    "topics": [
        "\n",
        "Industrial Organization",
        "\n",
        "Market Structure and Firm Performance",
        "\n"
    ],
    "program": [
        "\n",
        "Industrial Organization",
        "\n",
        "Productivity, Innovation, and Entrepreneurship",
        "\n"
    ],
    "projects": null,
    "working_groups": null,
    "abstract": "\n\nThis paper outlines a framework which computes and analyzes the equilibria from a class of dynamic games. The framework dates to Ericson and Pakes (1995), and allows for a finite number of heterogeneous firms, sequential investments with stochastic outcomes, and entry and exit. The equilibrium analyzed is a Markov Perfect equilibrium in the sense of Maskin and Tirole (1988). The simplest version of the framework is supported by a publically accessible computer program which computes equilibrium policies for user-specified primitives, and then analyzes the evolution of the industry from user-specified initial conditions. We begin by outlining the publically accessible framework. It allows for three types of competition in the spot market for current output (specified  up to a set of parameter values set by the user), and has modules which allow the user to compare the industry structures generated by the Markov Perfect equilibrium to those that would be generated by a social planner and to those that would be generated by  prefect collusion.' Next we review extensions that have been made to the simple framework. These were largely made by other authors who needed to enrich the framework so that it could be used to provide a realistic analysis of particular applied problems. The third section provides a simple way of evaluating the computational burden of the algorithm for a given set of primitives, and then shows that computational constraints are still binding in many applied situations. The last section reviews two computational algorithms designed to alleviate this computational constraint; one of which is based on functional form approximations and the other on learning techniques similar to those used in the artificial intelligence literature.\n\n",
    "acknowledgement": "\n"
}